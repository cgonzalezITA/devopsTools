{{- if ((.Values.utils).enabled) }}
# example values for the utils and echo components
# utils:
#   enabled: true
#   echo:
#     enabled: true
#     ingress: 
#       enabled: true
#       tls:
#         # []
#         - hosts: [ fiwaredsc-orion.ita.es]
#           secretName: secret.ita.es-tls
#       hosts: 
#         # []
#         ## provide a hosts and the paths that should be available          
#         - host:  fiwaredsc-orion.ita.es
#           path: /echo
# https://hub.docker.com/r/arunvelsriram/utils
apiVersion: v1
kind: List
metadata:
  resourceVersion: ""
items:
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      labels:
        app: netutils
      name:  netutils-files
      namespace: {{ .Release.Namespace }}
    data:
      infiniteLoop.sh: |-
        #!/bin/bash
        while true; do echo "Next wakeup in 3600s. Zzzz"; sleep 3600 ; done
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: netutils
      name:  netutils
    spec:
      ports:
        - port: 8080
      selector:
        app: netutils

  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      labels:
        app: netutils
      name:  netutils
      namespace: {{ .Release.Namespace }}
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: netutils
      strategy: {}
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: netutils
        spec:
          containers:
            - name: utils
              image: arunvelsriram/utils
              command:
                - "/tmp/infiniteLoop.sh"
              imagePullPolicy: IfNotPresent
              volumeMounts:
                - name: netutils-files
                  mountPath: /tmp
                  # subPath: infiniteLoop.sh
          restartPolicy: Always
          volumes:
            - name: netutils-files
              configMap:
                name: netutils-files
                defaultMode: 0777
{{- end }}
---
{{- if and ((.Values.utils).enabled) (((.Values.utils).echo).enabled) }}
{{- $ns := .Release.Namespace }}
# {{- $svcName := printf "%s-echo-svc" .Release.Name }}
# Echo artifacts that expose an ingress to show server info
apiVersion: v1
kind: List
metadata:
  resourceVersion: ""
items:
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: echo
      name:  echo-svc
      namespace: {{ $ns }}
    spec:
      ports:
        - port: 8080
          protocol: TCP
          targetPort: 8080
      selector:
        app: echo

  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      labels:
        app: echo
      name:  echo
      namespace: {{ .Release.Namespace }}
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: echo
      strategy: {}
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: echo
        spec:
          containers:
            - image: gcr.io/kubernetes-e2e-test-images/echoserver:2.2
              name: echo
              ports:
                - containerPort: 8080
              env:
                - name: NODE_NAME
                  valueFrom:
                    fieldRef:
                      fieldPath: spec.nodeName
                - name: POD_NAME
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.name
                - name: POD_NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.namespace
                - name: POD_IP
                  valueFrom:
                    fieldRef:
                      fieldPath: status.podIP
              resources: {}
{{- if ((((.Values.utils).echo).ingress).enabled) }}
  - kind: Ingress
    apiVersion: networking.k8s.io/v1
    metadata:
      generation: 1
      name: echo
      namespace: {{ .Release.Namespace }}
    spec:
      ingressClassName: nginx
      {{- if .Values.utils.echo.ingress.tls }}
      tls:
        {{- range .Values.utils.echo.ingress.tls }}
        - hosts:
          {{- range .hosts }}
          - {{ . }}
          {{- end }}
          {{- $secretName := .secretName }}
          secretName: {{ $secretName }}
          {{- end }}
        {{- end }}
      {{- end }}
      rules:
      {{- range .Values.utils.echo.ingress.hosts }}
      - host: {{ .host }}
        http:
          paths:
{{- $path := default "/" .path }}
{{- if not (hasPrefix "/" $path) }}
{{- fail (printf "Error: .path must start with a /, not %s" $path) }}
{{- end }}
            - backend:
                service:
                  name: echo-svc
                  port:
                    number: 8080
              path: {{ $path }}
              pathType: Prefix              
{{- end }}
{{- end }}